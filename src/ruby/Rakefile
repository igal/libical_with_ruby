desc 'Compile Ruby bindings'
task :default => 'LibicalWrap.so'

file 'ical.h' do
  cp '../libical/ical.h', 'ical.h'
end

file 'icalss.h' do
  cp '../libicalss/icalss.h', 'icalss.h'
end

file 'LibicalWrap.c' => ['LibicalWrap.i', '../libical/.libs/libical.so'] do
  Rake::Task['clean'].invoke
  sh 'swig -ruby -autorename -o LibicalWrap.c LibicalWrap.i'
end

file 'Makefile' => ['LibicalWrap.c', 'extconf.rb'] do
  sh 'ruby extconf.rb'
end

file 'LibicalWrap.so' => ['LibicalWrap.c', 'Makefile', 'ical.h', 'icalss.h'] do
  sh 'make'
end

desc 'Clean up generated files.'
task :clean do
  files = Dir['*.o', '*.so', '*.loT', 'Makefile', 'LibicalWrap.c'].uniq
  rm files unless files.empty?
end

desc 'Start console session with bindings loaded. Requires "ruby-debug" gem.'
task :console => ['LibicalWrap.so'] do
  require 'LibicalWrap'
  require 'rubygems'; require 'ruby-debug'; Debugger.start; debugger; 1
end

desc 'Run simple check to see if bindings work.'
task :check => ['LibicalWrap.so'] do
  puts 'Requiring LibicalWrap...'
  require 'LibicalWrap'
  puts 'SUCCESS!'
  puts 'Calling LibicalWrap function...'
  puts LibicalWrap::icalcomponent_kind_to_string(9).size > 0 ? 'SUCCESS!' : 'FAILURE!'
end
task :run => :check

desc "Run an example program that uses the Ruby bindings"
task :example => ['LibicalWrap.so'] do
  sh %{ruby example_minimal.rb}
end

desc "Run the Ruby example programs and stop if one fails"
task :test => ['LibicalWrap.so'] do
  [
    "example_loader.rb", 
    "example_minimal.rb", 
    "example_reader.rb", 
    "example_upcoming.rb", 
  ].each do |program|
    sh "ruby #{program}" or raise "Failed while running: #{program}"
  end
end
